FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# JAA-BotBackend
JAA-BotBackend is the set of APIs that are required to repsond to the questions that JAA-Bot will have to deal with. 
JAA-Bot is the mechanised replacement for JAA (Human) for many of the questions that take a ludicrous period of time to field, yet add value to the field. In many cases, these are simply a reposnse with a URL and therefore are better repeated by a Bot who will get the URLs more repeatedly correct than I JAA can type. 

# ComponentProperty (object)
# ComponentMetadata (object)
## Properties
- ComponentName (string)
- ComponentProperties (ComponentProperty[])

# ComponentRequest (object)
## Properties
- ComponentName (string)

#ComponentResponse (object)

#ComponentError (object) 


## Component API [/AgeChecker]
## Component API [/Pizzabaker]

## Component API [/components]

### GetComponents [GET]

+ Response 200 (application/json)
    
    + Body

            [ 
                {
                    "name": "AgeChecker", 
                    "channels": 
                        {
                            "facebook": "1.0" 
                        },
                    "componentProperties": 
                        {
                            "minAge": 
                                { 
                                    "type": "integer", 
                                    "required": true 
                                }
                        },
                    "supportedActions": 
                        [
                            "success",
                            "fail"
                        ]
                },
                {
                    "name": "PizzaBaker", 
                    "channels": 
                        {
                            "facebook": "1.0" 
                        },
                    "componentProperties": 
                        {
                            "size": 
                                { 
                                    "type": "string", 
                                    "required": true 
                                }, 
                            "crust": 
                                { 
                                    "type": "string", 
                                    "required": true 
                                }, 
                            "type": 
                                { 
                                    "type": "string", 
                                    "required": true 
                                }
                        }, 
                    "supportedActions": 
                        [
                            "pizzaReady",
                            "fail" 
                        ]
                }
            ]

### PostComponents [POST]

+ Response 200 (application/json)

    + Body
            
            {
                "platformVersion": "1.0",
                "context" : {
                    "location" : {
                        "type" : "String",
                        "value" : "San Francisco",
                        "entity" : false
                    },
                    "system.errorAction" : {
                        "type" : "string",
                        "value" : null,
                        "entity" : false
                    },
                    "system.errorState" : {
                        "type" : "string",
                        "value" : null,
                        "entity" : false
                    }
                }
            },
                "action" : null,
                "exit" : false,
                "done" : false,
                "error" : false,
                "modifyContext" : false
            }
            

## Basic Auth Protection [/protected]

### Status [GET]
            
+ Response 401
    + Headers
    
            WWW-Authenticate: Basic realm="hidden"

+ Request
    + Headers
    
            Authorization: Basic ABC123

+ Response 200 (application/json)

            {   
                "status": "OK"
            }

## Questions Collection [/questions]

### List All Questions [GET]

+ Response 200 (application/json)

        [
            {
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 2048
                    }, {
                        "choice": "Python",
                        "votes": 1024
                    }, {
                        "choice": "Objective-C",
                        "votes": 512
                    }, {
                        "choice": "Ruby",
                        "votes": 256
                    }
                ]
            }
        ]



### Create a New Question [POST]

You may create your own question using this action. It takes a JSON
object containing a question and a collection of answers in the
form of choices.

+ Request (application/json)

        {
            "question": "Favourite programming language?",
            "choices": [
                "Swift",
                "Python",
                "Objective-C",
                "Ruby"
            ]
        }

+ Response 201 (application/json)

    + Headers

            Location: /questions/2

    + Body

            {
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 0
                    }, {
                        "choice": "Python",
                        "votes": 0
                    }, {
                        "choice": "Objective-C",
                        "votes": 0
                    }, {
                        "choice": "Ruby",
                        "votes": 0
                    }
                ]
            }        

## CanDo Workshop Collection [/cando]

### CanDo Workshop Location [GET]

CanDo workshops appear in many formats, but intiailly you need to knwo that thye are there. Provide a resposne detailing the location of CanDo workshops for CPRs and SCs to browse and consider how they can use them.

+ Response 200 (application/json)

        [
            {
                "question": "Which part of CanDo workshops are you interested in?",
                "published_at": "2017-05-26T00:00:00.000Z",
                "choices": [
                    {
                        "choice": "AppDev"
                    }, {
                        "choice": "DevOps"
                    }, {
                        "choice": "CI/CD"
                    }, {
                        "choice": "WorkshopLocation"
                    }
                ]
            }
        ]
        
## Cloud Maintenance Collection [/cloudmaintenance]

### Cloud Maintenance Location [GET]

Cloud Maintenance windows are one of the most common questions asked about by customers, reps and SCs. Finding the source of cloud maintenance is a matter of looking in the support site, however, many don't find this. Returning the location of the relevant data for maintenance windows is the purpose of this API set.

+ Response 200 (application/json)

        [
            {
                "question": "What aspect of Cloud Maintenance windows are you interested in?",
                "published_at": "2017-05-26T00:00:00.000Z",
                "choices": [
                    {
                        "choice": "Infrastructure"
                    }, {
                        "choice": "Platform"
                    }, {
                        "choice": "Software"
                    }
                ]
            }
        ]
        
        
## NCER Collection [/ncer]

### NCER Location [GET]

NCER is one of the best kept secrets int eh Sales world. The ability to get a cloud account with more resource, for more time for a customer. This returns the URL for the NCER process.
(Next step is to include a description of the process itself to explain the basic flow.

+ Response 200 (application/json)

        [
            {
                "ncerlocation": "http://myurl.xyw.com/ncercontent",
            }
        ]
        
## Corporate Folio Collection [/corpFolio]

### Corporate Folio Location [GET]

Corporate Folio is a number of useful URLs that provide info for RFP and RFI responses concnering corporate infromation, product development practices and other useful metrics and data for resposnes to typical customer questions. 
Usually bioilerplate, these resposnes can seriously shorten the process of completing the standard questions for an RFP or RFI.

+ Response 200 (application/json)

        [
            {
                "corpFolio": "http://myurl.xyw.com/corpFolio",
            }
        ]
        
## Cloud Trial Collection [/cloudTrial]

### Cloud Trial Location [GET]

There are a numebr of different options for customer trials today and, following the introduction of cost limited trials, there remains a need for 30 day trials. This API delivers the URL for getting a trial, the old fashioned way.

+ Response 200 (application/json)

        [
            {
                "trial30days": "http://myurl.xyw.com/trials30days",
            }
        ]